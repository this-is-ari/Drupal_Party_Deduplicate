<?php

/**
 * Implements hook_form_FORM_ID_alter().
 */
function party_unique_form_party_primary_fields_edit_field_alter(&$form, &$form_state) {

  if ($form['#target'] == 'email' && isset($form['options'])) {
    if (!isset($form['options'])) {
      $form['options'] = array(
        '#type' => 'fieldset',
        '#title' => t('Settings'),
      );
    }
    $form['options']['party_unique'] = array(
      '#type' => 'checkbox',
      '#title' => t('Merge Parties with the same email'),
      '#description' => t('If another Party with the same email address already exists datasets will be attached to existing Party instead of creation duplicate.'),
      '#default_value' => variable_get('party_unique_email', FALSE),
    );
  }
  $form['#submit'][] = 'party_unique_form_party_primary_fields_edit_field_submit';
}

/**
 * Form submitter for 'party_primary_fields_edit_field' form.
 */
function party_unique_form_party_primary_fields_edit_field_submit($form, &$form_state) {
  if ($form['#target'] == 'email') {
    variable_set('party_unique_email', (bool) $form_state['values']['party_unique']);
  }
}

function party_unique_entity_update($entity, $type) {
	if($type == "party"){
		$party = $entity;

		if(empty($party->merged_party)){
			drupal_register_shutdown_function('party_unique_shutdown_merge', $party);
		}
	}
}

function party_unique_shutdown_merge($party){
		$merge_parties = variable_get('party_unique_email', FALSE);
		$merge_var = variable_get('party_unique_mergefields', array());
		$merge_fields = array();
		$pwrapper = entity_metadata_wrapper('party', $party);

		// Create array with merging fields and values
		foreach($merge_var as $fname => $enabled){
			$fvalue = $pwrapper->$fname->value();
			if(($enabled) && !empty($fvalue)){
				$merge_fields[$fname] = $fvalue;
			}
		}

		if (count($merge_fields) || $merge_parties) {
			
			$db_or = db_or();
			$query = party_query('p');
			
			foreach($merge_fields as $fname => $fvalue){
				$query->leftJoin('field_data_'.$fname, $fname, $fname.'.entity_id = p.pid');
				$db_or->condition($fname.'_value', $fvalue);
			}
			$db_or->condition('p.email', $party->email);
			
			$query->fields('p');
			$query->range(0, 1);
			$query->condition($db_or);
			$query->orderBy('p.pid', 'ASC');

			$query->condition('merged_party', 0);
			if ($match = $query->execute()->fetchAssoc()) {
				$exparty_pid = $match['pid'];
				$extparty = party_load($exparty_pid);
				if($party->pid != $extparty->pid){
					$party = party_unique_merge($extparty, $party);
					$party->save();
				}
			}	
		}
}

/**
 * Party merging function.
 * Parameters: master party object, merging party object that duplicates master party.
 */
function party_unique_merge($masterparty, $mergerparty) {
  $data_sets = party_get_party_data_sets($mergerparty);

	// Merging hats
	if(!isset($masterparty->party_hat['und']) OR !is_array($masterparty->party_hat['und'])) $masterparty->party_hat['und'] = array();
	if(!isset($mergerparty->party_hat['und']) OR !is_array($mergerparty->party_hat['und'])) $mergerparty->party_hat['und'] = array();
	$masterparty->party_hat['und'] = array_unique(array_merge($masterparty->party_hat['und'], $mergerparty->party_hat['und']), SORT_REGULAR);
	
	$masterparty->save();
  if (count($data_sets)) {
    foreach ($data_sets as $data_set) {
      $mergercontroller = $mergerparty->getDataSetController($data_set);
      $ids = $mergercontroller->getEntityIds();
      if (count($ids)) {
        $mastercontroller = $masterparty->getDataSetController($data_set);
				$entity = $mergercontroller->getEntity();
				$mastercontroller->attachEntity($entity);           
        $mastercontroller->save();
      }
    }
  }
  $mergerparty->merged_party = $masterparty->pid;
  $mergerparty->hidden = TRUE;
  $masterparty->save();
	return $mergerparty;
}

function party_unique_field_widget_info_alter(&$info) {
	$info['party_primary_field']['settings']['deduplicate'] = 0;
}
								
function party_unique_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#instance']['widget']['type'] == 'party_primary_field') {
		$merge_var = variable_get('party_unique_mergefields', array());
    $form['party_unique_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Party unique settings'),
      '#target' => $form['#field']['field_name'],
      '#parents' => array('instance', 'widget', 'settings', 'deduplicate'),
      '#weight' => 0,
			'#tree' => TRUE,
			'merge' => array(
				'#type' => 'checkbox',
				'#title' => t('Merge Parties with the same values'),
				'#default_value' => $merge_var[$form['#field']['field_name']],
			),
    );
		$form['#submit'][] = 'party_unique_form_field_ui_field_edit_form_submit';
  }
}

function party_unique_form_field_ui_field_edit_form_submit(&$form, &$form_state){
	$merge_var = variable_get('party_unique_mergefields', array());
	$fname = $form['#field']['field_name'];
	$mval = $form['party_unique_settings']['merge']['#value'];
	$merge_var[$fname] = $mval;
	variable_set('party_unique_mergefields', $merge_var);
}